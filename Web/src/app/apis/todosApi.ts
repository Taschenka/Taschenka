//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export module todos {
  export const API_BASE_URL = new InjectionToken<string>('http://localhost:5210');

  @Injectable()
  export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
      this.http = http;
      this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    todosAll(): Observable<GetTodoDto[]> {
      let url_ = this.baseUrl + "/Todos";
      url_ = url_.replace(/[?&]$/, "");

      let options_: any = {
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Accept": "text/plain"
        })
      };

      return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processTodosAll(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processTodosAll(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<GetTodoDto[]>;
          }
        } else
          return _observableThrow(response_) as any as Observable<GetTodoDto[]>;
      }));
    }

    protected processTodosAll(response: HttpResponseBase): Observable<GetTodoDto[]> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {};
      if (response.headers) {
        for (let key of response.headers.keys()) {
          _headers[key] = response.headers.get(key);
        }
      }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
              result200!.push(GetTodoDto.fromJS(item));
          }
          else {
            result200 = <any>null;
          }
          return _observableOf(result200);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    todosPOST(body: CreateTodoDto | undefined): Observable<GetTodoDto> {
      let url_ = this.baseUrl + "/Todos";
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(body);

      let options_: any = {
        body: content_,
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Content-Type": "application/json",
          "Accept": "text/plain"
        })
      };

      return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processTodosPOST(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processTodosPOST(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<GetTodoDto>;
          }
        } else
          return _observableThrow(response_) as any as Observable<GetTodoDto>;
      }));
    }

    protected processTodosPOST(response: HttpResponseBase): Observable<GetTodoDto> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetTodoDto.fromJS(resultData200);
          return _observableOf(result200);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf<GetTodoDto>(null as any);
    }

    /**
     * @return Success
     */
    todosGET(id: string): Observable<GetTodoDto> {
      let url_ = this.baseUrl + "/Todos/{id}";
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      let options_: any = {
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Accept": "text/plain"
        })
      };

      return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processTodosGET(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processTodosGET(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<GetTodoDto>;
          }
        } else
          return _observableThrow(response_) as any as Observable<GetTodoDto>;
      }));
    }

    protected processTodosGET(response: HttpResponseBase): Observable<GetTodoDto> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetTodoDto.fromJS(resultData200);
          return _observableOf(result200);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf<GetTodoDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    todosPUT(id: string, body: UpdateTodoDto | undefined): Observable<void> {
      let url_ = this.baseUrl + "/Todos/{id}";
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(body);

      let options_: any = {
        body: content_,
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
          "Content-Type": "application/json",
        })
      };

      return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processTodosPUT(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processTodosPUT(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<void>;
          }
        } else
          return _observableThrow(response_) as any as Observable<void>;
      }));
    }

    protected processTodosPUT(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          return _observableOf<void>(null as any);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf<void>(null as any);
    }

    /**
     * @return Success
     */
    todosDELETE(id: string): Observable<void> {
      let url_ = this.baseUrl + "/Todos/{id}";
      if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      let options_: any = {
        observe: "response",
        responseType: "blob",
        headers: new HttpHeaders({
        })
      };

      return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_: any) => {
        return this.processTodosDELETE(response_);
      })).pipe(_observableCatch((response_: any) => {
        if (response_ instanceof HttpResponseBase) {
          try {
            return this.processTodosDELETE(response_ as any);
          } catch (e) {
            return _observableThrow(e) as any as Observable<void>;
          }
        } else
          return _observableThrow(response_) as any as Observable<void>;
      }));
    }

    protected processTodosDELETE(response: HttpResponseBase): Observable<void> {
      const status = response.status;
      const responseBlob =
        response instanceof HttpResponse ? response.body :
          (response as any).error instanceof Blob ? (response as any).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
      if (status === 200) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          return _observableOf<void>(null as any);
        }));
      } else if (status !== 200 && status !== 204) {
        return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }));
      }
      return _observableOf<void>(null as any);
    }
  }

  export class CreateTodoDto implements ICreateTodoDto {
    name!: string;
    description!: string;
    deadline!: Date;
    isDone!: boolean;

    constructor(data?: ICreateTodoDto) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.name = _data["name"];
        this.description = _data["description"];
        this.deadline = _data["deadline"] ? new Date(_data["deadline"].toString()) : <any>undefined;
        this.isDone = _data["isDone"];
      }
    }

    static fromJS(data: any): CreateTodoDto {
      data = typeof data === 'object' ? data : {};
      let result = new CreateTodoDto();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["name"] = this.name;
      data["description"] = this.description;
      data["deadline"] = this.deadline ? this.deadline.toISOString() : <any>undefined;
      data["isDone"] = this.isDone;
      return data;
    }
  }

  export interface ICreateTodoDto {
    name: string;
    description: string;
    deadline: Date;
    isDone: boolean;
  }

  export class GetTodoDto implements IGetTodoDto {
    id?: string;
    name!: string;
    description!: string;
    deadline!: Date;
    isDone!: boolean;

    constructor(data?: IGetTodoDto) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.id = _data["id"];
        this.name = _data["name"];
        this.description = _data["description"];
        this.deadline = _data["deadline"] ? new Date(_data["deadline"].toString()) : <any>undefined;
        this.isDone = _data["isDone"];
      }
    }

    static fromJS(data: any): GetTodoDto {
      data = typeof data === 'object' ? data : {};
      let result = new GetTodoDto();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["id"] = this.id;
      data["name"] = this.name;
      data["description"] = this.description;
      data["deadline"] = this.deadline ? this.deadline.toISOString() : <any>undefined;
      data["isDone"] = this.isDone;
      return data;
    }
  }

  export interface IGetTodoDto {
    id?: string;
    name: string;
    description: string;
    deadline: Date;
    isDone: boolean;
  }

  export class UpdateTodoDto implements IUpdateTodoDto {
    name!: string;
    description!: string;
    deadline!: Date;
    isDone!: boolean;

    constructor(data?: IUpdateTodoDto) {
      if (data) {
        for (var property in data) {
          if (data.hasOwnProperty(property))
            (<any>this)[property] = (<any>data)[property];
        }
      }
    }

    init(_data?: any) {
      if (_data) {
        this.name = _data["name"];
        this.description = _data["description"];
        this.deadline = _data["deadline"] ? new Date(_data["deadline"].toString()) : <any>undefined;
        this.isDone = _data["isDone"];
      }
    }

    static fromJS(data: any): UpdateTodoDto {
      data = typeof data === 'object' ? data : {};
      let result = new UpdateTodoDto();
      result.init(data);
      return result;
    }

    toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["name"] = this.name;
      data["description"] = this.description;
      data["deadline"] = this.deadline ? this.deadline.toISOString() : <any>undefined;
      data["isDone"] = this.isDone;
      return data;
    }
  }

  export interface IUpdateTodoDto {
    name: string;
    description: string;
    deadline: Date;
    isDone: boolean;
  }

  export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
      super();

      this.message = message;
      this.status = status;
      this.response = response;
      this.headers = headers;
      this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
      return obj.isApiException === true;
    }
  }

  function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
      return _observableThrow(result);
    else
      return _observableThrow(new ApiException(message, status, response, headers, null));
  }

  function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
      if (!blob) {
        observer.next("");
        observer.complete();
      } else {
        let reader = new FileReader();
        reader.onload = event => {
          observer.next((event.target as any).result);
          observer.complete();
        };
        reader.readAsText(blob);
      }
    });
  }

}